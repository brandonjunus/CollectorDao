/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface CollectorDAOInterface extends utils.Interface {
  functions: {
    "DOMAIN_TYPEHASH()": FunctionFragment;
    "MEMBERSHIP_REQ()": FunctionFragment;
    "NAME()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "VOTE_TYPEHASH()": FunctionFragment;
    "buyVotingPower()": FunctionFragment;
    "castVote(uint256,bool)": FunctionFragment;
    "execute(address[],uint256[],bytes[],string)": FunctionFragment;
    "getVotingPower()": FunctionFragment;
    "multiVerifyAndVote(address[],uint256[],bool[],uint8[],bytes32[],bytes32[])": FunctionFragment;
    "proposals(uint256)": FunctionFragment;
    "propose(address[],uint256[],bytes[],string)": FunctionFragment;
    "quorumPercentage()": FunctionFragment;
    "totalVotingPower()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOMAIN_TYPEHASH"
      | "MEMBERSHIP_REQ"
      | "NAME"
      | "VERSION"
      | "VOTE_TYPEHASH"
      | "buyVotingPower"
      | "castVote"
      | "execute"
      | "getVotingPower"
      | "multiVerifyAndVote"
      | "proposals"
      | "propose"
      | "quorumPercentage"
      | "totalVotingPower"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MEMBERSHIP_REQ",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "VOTE_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyVotingPower",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [string[], BigNumberish[], BytesLike[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingPower",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multiVerifyAndVote",
    values: [
      string[],
      BigNumberish[],
      boolean[],
      BigNumberish[],
      BytesLike[],
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [string[], BigNumberish[], BytesLike[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "quorumPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVotingPower",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MEMBERSHIP_REQ",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "VOTE_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyVotingPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVotingPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiVerifyAndVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quorumPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVotingPower",
    data: BytesLike
  ): Result;

  events: {
    "ProposalCreated(uint256,address,address[],uint256[],bytes[],string,uint256,uint256,uint256)": EventFragment;
    "ProposalExecuted(uint256,address,address[],uint256[],bytes[],string)": EventFragment;
    "UnverifiedSigner(address,uint256)": EventFragment;
    "VoteCasted(uint256,address,uint256)": EventFragment;
    "VotingPowerPurchased(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnverifiedSigner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteCasted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VotingPowerPurchased"): EventFragment;
}

export interface ProposalCreatedEventObject {
  proposalID: BigNumber;
  creator: string;
  targets: string[];
  values: BigNumber[];
  calldatas: string[];
  description: string;
  voteEnd: BigNumber;
  executionEnd: BigNumber;
  votesInFavor: BigNumber;
}
export type ProposalCreatedEvent = TypedEvent<
  [
    BigNumber,
    string,
    string[],
    BigNumber[],
    string[],
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  ProposalCreatedEventObject
>;

export type ProposalCreatedEventFilter = TypedEventFilter<ProposalCreatedEvent>;

export interface ProposalExecutedEventObject {
  proposalID: BigNumber;
  executor: string;
  targets: string[];
  values: BigNumber[];
  calldatas: string[];
  description: string;
}
export type ProposalExecutedEvent = TypedEvent<
  [BigNumber, string, string[], BigNumber[], string[], string],
  ProposalExecutedEventObject
>;

export type ProposalExecutedEventFilter =
  TypedEventFilter<ProposalExecutedEvent>;

export interface UnverifiedSignerEventObject {
  signer: string;
  proposalID: BigNumber;
}
export type UnverifiedSignerEvent = TypedEvent<
  [string, BigNumber],
  UnverifiedSignerEventObject
>;

export type UnverifiedSignerEventFilter =
  TypedEventFilter<UnverifiedSignerEvent>;

export interface VoteCastedEventObject {
  proposalID: BigNumber;
  voter: string;
  votesInFavor: BigNumber;
}
export type VoteCastedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  VoteCastedEventObject
>;

export type VoteCastedEventFilter = TypedEventFilter<VoteCastedEvent>;

export interface VotingPowerPurchasedEventObject {
  addr: string;
  valueIncreased: BigNumber;
  totalUserValue: BigNumber;
}
export type VotingPowerPurchasedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  VotingPowerPurchasedEventObject
>;

export type VotingPowerPurchasedEventFilter =
  TypedEventFilter<VotingPowerPurchasedEvent>;

export interface CollectorDAO extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CollectorDAOInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    MEMBERSHIP_REQ(overrides?: CallOverrides): Promise<[BigNumber]>;

    NAME(overrides?: CallOverrides): Promise<[string]>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    VOTE_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    buyVotingPower(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    castVote(
      proposalID: BigNumberish,
      isVoteInFavor: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execute(
      targets: string[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getVotingPower(overrides?: CallOverrides): Promise<[BigNumber]>;

    multiVerifyAndVote(
      signers: string[],
      proposalIDs: BigNumberish[],
      isVoteInFavor: boolean[],
      v: BigNumberish[],
      r: BytesLike[],
      s: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        voteEnd: BigNumber;
        executionEnd: BigNumber;
        votesInFavor: BigNumber;
        votesAgainst: BigNumber;
        executed: boolean;
      }
    >;

    propose(
      targets: string[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    quorumPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalVotingPower(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  MEMBERSHIP_REQ(overrides?: CallOverrides): Promise<BigNumber>;

  NAME(overrides?: CallOverrides): Promise<string>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  VOTE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  buyVotingPower(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  castVote(
    proposalID: BigNumberish,
    isVoteInFavor: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execute(
    targets: string[],
    values: BigNumberish[],
    calldatas: BytesLike[],
    description: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getVotingPower(overrides?: CallOverrides): Promise<BigNumber>;

  multiVerifyAndVote(
    signers: string[],
    proposalIDs: BigNumberish[],
    isVoteInFavor: boolean[],
    v: BigNumberish[],
    r: BytesLike[],
    s: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      voteEnd: BigNumber;
      executionEnd: BigNumber;
      votesInFavor: BigNumber;
      votesAgainst: BigNumber;
      executed: boolean;
    }
  >;

  propose(
    targets: string[],
    values: BigNumberish[],
    calldatas: BytesLike[],
    description: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  quorumPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  totalVotingPower(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    MEMBERSHIP_REQ(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<string>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    VOTE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    buyVotingPower(overrides?: CallOverrides): Promise<BigNumber>;

    castVote(
      proposalID: BigNumberish,
      isVoteInFavor: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    execute(
      targets: string[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      description: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getVotingPower(overrides?: CallOverrides): Promise<BigNumber>;

    multiVerifyAndVote(
      signers: string[],
      proposalIDs: BigNumberish[],
      isVoteInFavor: boolean[],
      v: BigNumberish[],
      r: BytesLike[],
      s: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        voteEnd: BigNumber;
        executionEnd: BigNumber;
        votesInFavor: BigNumber;
        votesAgainst: BigNumber;
        executed: boolean;
      }
    >;

    propose(
      targets: string[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      description: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quorumPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    totalVotingPower(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "ProposalCreated(uint256,address,address[],uint256[],bytes[],string,uint256,uint256,uint256)"(
      proposalID?: null,
      creator?: null,
      targets?: null,
      values?: null,
      calldatas?: null,
      description?: null,
      voteEnd?: null,
      executionEnd?: null,
      votesInFavor?: null
    ): ProposalCreatedEventFilter;
    ProposalCreated(
      proposalID?: null,
      creator?: null,
      targets?: null,
      values?: null,
      calldatas?: null,
      description?: null,
      voteEnd?: null,
      executionEnd?: null,
      votesInFavor?: null
    ): ProposalCreatedEventFilter;

    "ProposalExecuted(uint256,address,address[],uint256[],bytes[],string)"(
      proposalID?: null,
      executor?: null,
      targets?: null,
      values?: null,
      calldatas?: null,
      description?: null
    ): ProposalExecutedEventFilter;
    ProposalExecuted(
      proposalID?: null,
      executor?: null,
      targets?: null,
      values?: null,
      calldatas?: null,
      description?: null
    ): ProposalExecutedEventFilter;

    "UnverifiedSigner(address,uint256)"(
      signer?: null,
      proposalID?: null
    ): UnverifiedSignerEventFilter;
    UnverifiedSigner(
      signer?: null,
      proposalID?: null
    ): UnverifiedSignerEventFilter;

    "VoteCasted(uint256,address,uint256)"(
      proposalID?: null,
      voter?: null,
      votesInFavor?: null
    ): VoteCastedEventFilter;
    VoteCasted(
      proposalID?: null,
      voter?: null,
      votesInFavor?: null
    ): VoteCastedEventFilter;

    "VotingPowerPurchased(address,uint256,uint256)"(
      addr?: null,
      valueIncreased?: null,
      totalUserValue?: null
    ): VotingPowerPurchasedEventFilter;
    VotingPowerPurchased(
      addr?: null,
      valueIncreased?: null,
      totalUserValue?: null
    ): VotingPowerPurchasedEventFilter;
  };

  estimateGas: {
    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    MEMBERSHIP_REQ(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    VOTE_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    buyVotingPower(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    castVote(
      proposalID: BigNumberish,
      isVoteInFavor: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execute(
      targets: string[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getVotingPower(overrides?: CallOverrides): Promise<BigNumber>;

    multiVerifyAndVote(
      signers: string[],
      proposalIDs: BigNumberish[],
      isVoteInFavor: boolean[],
      v: BigNumberish[],
      r: BytesLike[],
      s: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    propose(
      targets: string[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    quorumPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    totalVotingPower(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MEMBERSHIP_REQ(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VOTE_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyVotingPower(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    castVote(
      proposalID: BigNumberish,
      isVoteInFavor: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execute(
      targets: string[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getVotingPower(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multiVerifyAndVote(
      signers: string[],
      proposalIDs: BigNumberish[],
      isVoteInFavor: boolean[],
      v: BigNumberish[],
      r: BytesLike[],
      s: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    propose(
      targets: string[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    quorumPercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalVotingPower(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
